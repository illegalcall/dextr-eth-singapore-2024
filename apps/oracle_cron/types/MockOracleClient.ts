/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export type TokenPairPriceFeedStruct = {
  token1Price: BigNumberish
  token1Decimals: BigNumberish
  token2Price: BigNumberish
  token2Decimals: BigNumberish
  relativePrice: BigNumberish
  relativeDecimals: BigNumberish
}

export type TokenPairPriceFeedStructOutput = [
  token1Price: bigint,
  token1Decimals: bigint,
  token2Price: bigint,
  token2Decimals: bigint,
  relativePrice: bigint,
  relativeDecimals: bigint
] & {
  token1Price: bigint
  token1Decimals: bigint
  token2Price: bigint
  token2Decimals: bigint
  relativePrice: bigint
  relativeDecimals: bigint
}

export interface OracleClientMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'getAllPricesForPair'
      | 'getDerivedValueOfPair'
      | 'getPrice'
      | 'getSupraSvalueFeed'
      | 'owner'
      | 'renounceOwnership'
      | 'transferOwnership'
      | 'updateDerivedPricePairValues'
      | 'updatePricePairValues'
      | 'updateSupraSvalueFeed'
  ): FunctionFragment

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment

  encodeFunctionData(
    functionFragment: 'getAllPricesForPair',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getDerivedValueOfPair',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getPrice',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSupraSvalueFeed',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'updateDerivedPricePairValues',
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'updatePricePairValues',
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'updateSupraSvalueFeed',
    values: [AddressLike]
  ): string

  decodeFunctionResult(
    functionFragment: 'getAllPricesForPair',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDerivedValueOfPair',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getSupraSvalueFeed',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateDerivedPricePairValues',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatePricePairValues',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateSupraSvalueFeed',
    data: BytesLike
  ): Result
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike]
  export type OutputTuple = [previousOwner: string, newOwner: string]
  export interface OutputObject {
    previousOwner: string
    newOwner: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface OracleClientMock extends BaseContract {
  connect(runner?: ContractRunner | null): OracleClientMock
  waitForDeployment(): Promise<this>

  interface: OracleClientMockInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  getAllPricesForPair: TypedContractMethod<
    [_pair1: BigNumberish, _pair2: BigNumberish, operation: BigNumberish],
    [TokenPairPriceFeedStructOutput],
    'view'
  >

  getDerivedValueOfPair: TypedContractMethod<
    [pair_id_1: BigNumberish, pair_id_2: BigNumberish, operation: BigNumberish],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    'view'
  >

  getPrice: TypedContractMethod<
    [_priceIndex: BigNumberish],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    'view'
  >

  getSupraSvalueFeed: TypedContractMethod<[], [string], 'view'>

  owner: TypedContractMethod<[], [string], 'view'>

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >

  updateDerivedPricePairValues: TypedContractMethod<
    [
      pairIndexs1: BigNumberish[],
      pairIndexs2: BigNumberish[],
      prices: BigNumberish[]
    ],
    [void],
    'nonpayable'
  >

  updatePricePairValues: TypedContractMethod<
    [pairs: BigNumberish[], decimals: BigNumberish[], prices: BigNumberish[]],
    [void],
    'nonpayable'
  >

  updateSupraSvalueFeed: TypedContractMethod<
    [_newSValueFeed: AddressLike],
    [void],
    'nonpayable'
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'getAllPricesForPair'
  ): TypedContractMethod<
    [_pair1: BigNumberish, _pair2: BigNumberish, operation: BigNumberish],
    [TokenPairPriceFeedStructOutput],
    'view'
  >
  getFunction(
    nameOrSignature: 'getDerivedValueOfPair'
  ): TypedContractMethod<
    [pair_id_1: BigNumberish, pair_id_2: BigNumberish, operation: BigNumberish],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    'view'
  >
  getFunction(
    nameOrSignature: 'getPrice'
  ): TypedContractMethod<
    [_priceIndex: BigNumberish],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    'view'
  >
  getFunction(
    nameOrSignature: 'getSupraSvalueFeed'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'updateDerivedPricePairValues'
  ): TypedContractMethod<
    [
      pairIndexs1: BigNumberish[],
      pairIndexs2: BigNumberish[],
      prices: BigNumberish[]
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'updatePricePairValues'
  ): TypedContractMethod<
    [pairs: BigNumberish[], decimals: BigNumberish[], prices: BigNumberish[]],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'updateSupraSvalueFeed'
  ): TypedContractMethod<[_newSValueFeed: AddressLike], [void], 'nonpayable'>

  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >

  filters: {
    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >
  }
}
